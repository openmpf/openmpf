// NOTICE
//
// This software (or technical data) was produced for the U.S. Government
// under contract, and is subject to the Rights in Data-General Clause
// 52.227-14, Alt. IV (DEC 2007).
//
// Copyright 2018 The MITRE Corporation. All Rights Reserved.


// Copyright 2018 The MITRE Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package org.mitre.mpf.wfm.buffers;

import "algorithmproperty.proto";
import "metrics.proto";

option java_outer_classname = "DetectionProtobuf";

enum DetectionError {
    NO_DETECTION_ERROR             = 0;
    DETECTION_NOT_INITIALIZED      = 1;
    UNRECOGNIZED_DATA_TYPE         = 2;
    UNSUPPORTED_DATA_TYPE          = 3;
    INVALID_DATAFILE_URI           = 4;
    COULD_NOT_OPEN_DATAFILE        = 5;
    COULD_NOT_READ_DATAFILE        = 6;
    FILE_WRITE_ERROR               = 7;
    IMAGE_READ_ERROR               = 8;
    BAD_FRAME_SIZE                 = 9;
    BOUNDING_BOX_SIZE_ERROR        = 10;
    INVALID_FRAME_INTERVAL         = 11;
    INVALID_START_FRAME            = 12;
    INVALID_STOP_FRAME             = 13;
    DETECTION_FAILED               = 14;
    DETECTION_TRACKING_FAILED      = 15;
    MISSING_PROPERTY               = 16;
    INVALID_PROPERTY               = 17;
    PROPERTY_IS_NOT_INT            = 18;
    PROPERTY_IS_NOT_FLOAT          = 19;
    INVALID_ROTATION               = 20;
    MEMORY_ALLOCATION_FAILED       = 21;
    UNRECOGNIZED_DETECTION_ERROR   = 22;
    REQUEST_CANCELLED              = 23; // The detection request was cancelled by the user.
    DEAD_LETTER                    = 24;
    GPU_ERROR                      = 25;
}

message PropertyMap {
    optional string key = 1;
    optional string value = 2;
}

message GenericTrack {
    optional float confidence = 1 [default = -1];
    repeated PropertyMap detection_properties = 2;
}

message ImageLocation {
    optional int32 x_left_upper = 1;
    optional int32 y_left_upper = 2;
    optional int32 width = 3;
    optional int32 height = 4;
    optional float confidence = 5 [default = -1];
    repeated PropertyMap detection_properties = 6;
}

message VideoTrack {
    optional int32 start_frame = 1 [default = -1];
    optional int32 stop_frame = 2 [default = -1];

    // TODO: Upgrade development env to proto3 and use the following syntax:
    // map<int32, ImageLocation> frame_locations = 3;

    // Define a FrameLocationMap for now so that everything works with proto2.
    message FrameLocationMap {
      optional int32 frame = 1;
      optional ImageLocation image_location = 2;
    }
    repeated FrameLocationMap frame_locations = 3;

    optional float confidence = 4 [default = -1];
    repeated PropertyMap detection_properties = 5;
}

message AudioTrack {
    optional int32 start_time = 1 [default = -1];
    optional int32 stop_time = 2 [default = -1];
    optional float confidence = 3 [default = -1];
    repeated PropertyMap detection_properties = 4;
}

message DetectionRequest {
    // A unique identifier for this request.
    required int64 request_id = 1;

    // The path (not URI or URL) to the medium to process.
    required string data_uri = 2;

    enum DataType {
        UNKNOWN = 0;
        VIDEO = 1;
        IMAGE = 2;
        AUDIO = 3;
    }

    optional DataType data_type = 3 [default = VIDEO];

    repeated AlgorithmProperty algorithm_property = 4;

    // The ID of the medium to process. Many requests may have the same ID.
    optional int64 media_id = 400 [default = -1];

    // The current stage index in the pipeline.
    required int32 stage_index = 401 [ default = -1];

    // The name of the current stage in the pipeline.
    optional string stage_name = 402 [ default = "N/A"];

    // The index of the action in the current stage of the pipeline.
    required int32 action_index = 403 [ default = -1];

    // The name of the action which was used to create this request.
    optional string action_name = 404 [ default = "N/A"];

    repeated PropertyMap media_metadata = 405;

    message GenericRequest {
        // The track generated by a previous stage in a feed-forward pipeline.
        optional GenericTrack feed_forward_track = 1;
    }
    optional GenericRequest generic_request = 500;

    message VideoRequest {
        // The zero-based start frame in the video.
        optional int32 start_frame = 1 [default = -1];

        // The zero-based and inclusive stop frame to process in the video.
        optional int32 stop_frame = 2 [default = -1];

        // The track generated by a previous stage in a feed-forward pipeline.
        optional VideoTrack feed_forward_track = 3;
    }
    optional VideoRequest video_request = 501;

    message AudioRequest {
        // The start time in the audio or video file.
        optional int32 start_time = 1 [default = -1];

        // The stop time to process in the audio or video file.
        optional int32 stop_time = 2 [default = -1];

        // The track generated by a previous stage in a feed-forward pipeline.
        optional AudioTrack feed_forward_track = 3;
    }
    optional AudioRequest audio_request = 502;

    message ImageRequest {
        // The detection location generated by a previous stage in a
        // feed-forward pipeline.
        optional ImageLocation feed_forward_location = 1;
    }
    optional ImageRequest image_request = 503;
}

message DetectionResponse {
    required int64 request_id = 1;

    enum DataType {
        UNKNOWN = 0;
        VIDEO = 1;
        IMAGE = 2;
        AUDIO = 3;
    }

    optional DataType data_type = 2 [default = VIDEO];

    optional DetectionError error = 3;

    optional int32 start_index = 4; // Maps back to the request's start_index.

    optional int32 stop_index = 5; // Maps back to the request's stop_index.

    // Copied from the request.
    optional int64 media_id = 400 [default = -1];

    // Copied from the request.
    required int32 stage_index = 401 [ default = -1];

    // Copied from the request.
    optional string stage_name = 402 [ default = "N/A"];

    // Copied from the request.
    required int32 action_index = 403 [ default = -1];

    // Copied from the request.
    optional string action_name = 404 [ default = "N/A"];

    // Profiling metrics.
    optional MetricsMessage metrics = 405;


    message GenericResponse {
        required string detection_type = 1;
        repeated GenericTrack generic_tracks = 2;
    }
    repeated GenericResponse generic_responses = 500;

    message VideoResponse {
        required string detection_type = 1;
        repeated VideoTrack video_tracks = 2;
    }

    repeated VideoResponse video_responses = 501;

    message AudioResponse {
        required string detection_type = 1;
        repeated AudioTrack audio_tracks = 2;
    }
    repeated AudioResponse audio_responses = 502;

    message ImageResponse {
        required string detection_type = 1;
        repeated ImageLocation image_locations = 2;
    }
    repeated ImageResponse image_responses = 503;
}

//// Used for streaming video job segment summary message

message StreamingVideoDetection {
    optional int32 frame_number = 1;
    optional int64 time = 2;

    optional int32 x_left_upper = 3;
    optional int32 y_left_upper = 4;
    optional int32 width = 5;
    optional int32 height = 6;

    optional float confidence = 7 [default = -1];

    repeated PropertyMap detection_properties = 8;
}


message StreamingVideoTrack {
    optional int32 start_frame = 1;
    optional int64 start_time = 2;

    optional int32 stop_frame = 3;
    optional int64 stop_time = 4;

    optional float confidence = 5 [default = -1];

    repeated StreamingVideoDetection detections = 6;

    repeated PropertyMap detection_properties = 7;
}


message StreamingDetectionResponse {

    optional string error = 1;

    optional int32 segment_number = 2;

    optional int32 segment_start_frame = 3; // Start frame relative to the
                                            // beginning of stream processing:
                                            // segment 0 will start with frame 0

    optional int32 segment_stop_frame = 4;

    // If a message contains a VideoTrack, specify a detection type for it.
    optional string detection_type = 5;
    repeated StreamingVideoTrack video_tracks = 6;

    // Profiling metrics.
    optional MetricsMessage metrics = 400;

}
