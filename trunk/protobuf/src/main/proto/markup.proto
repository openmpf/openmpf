// NOTICE
//
// This software (or technical data) was produced for the U.S. Government
// under contract, and is subject to the Rights in Data-General Clause
// 52.227-14, Alt. IV (DEC 2007).
//
// Copyright 2023 The MITRE Corporation. All Rights Reserved.


// Copyright 2023 The MITRE Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package org.mitre.mpf.wfm.buffers;

option java_outer_classname = "Markup";

enum MediaType {
    UNKNOWN = 0;
    VIDEO = 1;
    IMAGE = 2;
    AUDIO = 3;
}

message MarkupRequest {
    int64 media_id = 1;
    MediaType media_type = 2;
    map<string, string> media_metadata = 3;
    // The path of the source media file.
    string source_path = 4;
    // The path of the file which should be created by this request.
    string destination_path = 5;
    // The keys are the 1-based frame number on which the box will appear.
    // The values are the bounding boxes which must be written.
    map<int32, BoundingBoxList> bounding_boxes = 6;
    // The collection of arbitrary key-value pairs.
    map<string, string> markup_properties  = 7;
}

// Wrapper around a list of bounding boxes. Used by MarkupRequest.bounding_boxes to map single
// frame numbers to multiple bounding boxes.
message BoundingBoxList {
    repeated BoundingBox bounding_boxes = 1;
}


enum BoundingBoxSource {
    DETECTION_ALGORITHM = 0;
    TRACKING_FILLED_GAP = 1;
    ANIMATION = 2;
}

message BoundingBox {
    // The x-coordinate of the bounding box relative the top-left corner of the image (positive x
    // values move right from this corner).
    int32 x = 1;
    // The y-coordinate of the bounding box relative the top-left corner of the image (positive y
    // values move down from this corner).
    int32 y = 2;
    int32 width = 3;
    int32 height = 4;
    // Rotation of bounding box in counter-clockwise direction.
    double rotation_degrees= 5;
    // Whether or not the bounding box is horizontally flipped.
    bool flip = 6;
    // Red channel of bounding box color.
    uint32 red = 7;
    // Green channel of bounding box color.
    uint32 green = 8;
    // Blue channel of bounding box color.
    uint32 blue = 9;
    BoundingBoxSource source = 10;
    // Whether or not the bounding box object is moving or stationary.
    bool moving = 11;
    // Whether or not the bounding box represents an exemplar.
    bool exemplar = 12;
    string label = 13;
}


message MarkupResponse {
    // The media_id of the corresponding MarkupRequest.
    int64 media_id = 1;
    // Indicates whether or not an error occurred while processing the corresponding MarkupRequest.
    bool has_error = 2;
    // Description of an error occurred while processing the corresponding MarkupRequest.
    string error_message = 3;
    // Path to the marked up file.
    string output_file_path = 4;
}
