/******************************************************************************
 * NOTICE                                                                     *
 *                                                                            *
 * This software (or technical data) was produced for the U.S. Government     *
 * under contract, and is subject to the Rights in Data-General Clause        *
 * 52.227-14, Alt. IV (DEC 2007).                                             *
 *                                                                            *
 * Copyright 2019 The MITRE Corporation. All Rights Reserved.                 *
 ******************************************************************************/

/******************************************************************************
 * Copyright 2019 The MITRE Corporation                                       *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License");            *
 * you may not use this file except in compliance with the License.           *
 * You may obtain a copy of the License at                                    *
 *                                                                            *
 *    http://www.apache.org/licenses/LICENSE-2.0                              *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 ******************************************************************************/

package org.mitre.mpf.wfm.businessrules;

import org.mitre.mpf.interop.JsonSegmentSummaryReport;
import org.mitre.mpf.rest.api.StreamingJobCreationRequest;
import org.mitre.mpf.wfm.WfmProcessingException;
import org.mitre.mpf.wfm.data.entities.persistent.StreamingJobRequest;
import org.mitre.mpf.wfm.data.entities.persistent.StreamingJobStatus;
import org.mitre.mpf.wfm.event.JobCompleteNotification;
import org.mitre.mpf.wfm.event.NotificationConsumer;

public interface StreamingJobRequestService {

    StreamingJobRequest run(StreamingJobCreationRequest jobCreationRequest);

    void subscribe(NotificationConsumer<JobCompleteNotification> consumer);

    void unsubscribe(NotificationConsumer<JobCompleteNotification> consumer);


    /**
     * Marks a streaming job as CANCELLING in both the StreamingJob and in the long-term database.
     * @param jobId     The OpenMPF-assigned identifier for the streaming job. The job must be a streaming job.
     * @param doCleanup if true, delete the streaming job files from disk as part of cancelling the streaming job.
     * @exception WfmProcessingException may be thrown if the streaming job
     * has already been cancelled or if the streaming jobs status is already terminal. It also may be thrown if the
     * streaming job can't be cancelled due to an error with identification of the streaming job using the specified
     * jobId. It also may be thrown if a warning or error occurs.
     */
    void cancel(long jobId, boolean doCleanup) throws WfmProcessingException;

    /**
     * Deletes files generated by a streaming job.
     * @param jobId The OpenMPF-assigned identifier for the streaming job. The job must be a streaming job.
     * @param outputObjectDirPath location where the job's generated files are stored
     * @exception WfmProcessingException may be thrown if the streaming job has been cancelled, but the job's output
     * object directory couldn't be deleted when doCleanup is enabled. It also may be thrown if the streaming job has
     * been cancelled, but an error was detected in specification of the jobs output object directory.
     */
    void cleanup(long jobId, String outputObjectDirPath) throws WfmProcessingException;

    /**
     * Send a health report for all current streaming jobs to the health report callback associated with each streaming job.
     * filtered out. Otherwise, all current streaming jobs will be processed.
     * @throws WfmProcessingException thrown if an error occurs
     */
    void sendHealthReports() throws WfmProcessingException;

    void handleJobStatusChange(long jobId, StreamingJobStatus status, long timestamp);

    void handleNewActivityAlert(long jobId, long frameId, long timestamp);

    void handleNewSummaryReport(JsonSegmentSummaryReport summaryReport);
}

